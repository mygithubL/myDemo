/****************************************************************************
* 名    称：USART_HMI_Sendbit(char *buf)
* 功    能：串口屏发送函数：字节发送
* 入口参数：u8 Ending（数据结尾）
* 出口参数：无
* 说    明：
* 调用方法： 
****************************************************************************/ 
void USART_HMI_Sendbit(u8 Ending)		        
{		 
	u8 i;
	 for(i=0;i<3;i++)
	 {
		 if(Ending!=0)
			{
				USART_SendData(USART2,Ending);  //发送一个字节
				while(USART_GetFlagStatus(USART2,USART_FLAG_TXE)==RESET){};//等待发送结束
			}
	 else  return ;
	 } 
}
/****************************************************************************
* 名    称：USART_HMI_Sends(char *buf)
* 功    能：串口屏发送函数：字符串发送
* 入口参数：char *buf
* 出口参数：无
* 说    明：
* 调用方法： 
****************************************************************************/ 
void USART_HMI_Sendstr(char *buf)
{
	u8 i=0;
	while(1)
	{
		 if(buf[i]!=0) 
			{
				USART_SendData(USART2,buf[i]);  //发送一个字节
				while(USART_GetFlagStatus(USART2,USART_FLAG_TXE)==RESET){};//等待发送结束
				i++;
			}
	   else  return ;
	}	
}


void USART2_IRQHandler(void)                	
{
  u8 Res;  
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必)
		{
			
		   RxBuffer[len++]  =USART_ReceiveData(USART2);	
			
       USART_SendData(USART1,USART_ReceiveData(USART2));  //发送一个字节
			 while(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET){};//等待发送结束
					
		  if((RxBuffer[0]==CMD_String||RxBuffer[0]==CMD_Page||RxBuffer[0]==CMD_Button||RxBuffer[0]==CMD_Num) && (RxBuffer[len-3]==0xff) && (RxBuffer[len-2]==0xff) && (RxBuffer[len-1]==0xff))
				{
					USART_ClearITPendingBit(USART2,USART_IT_RXNE);	
		      USART_RX_flag = 1;	
//					for(i=0; i< len; i++)					
//					printf("RxBuffer[%d] = %x \r\n",i,RxBuffer[i]); 
					for(i=0; i< len-4; i++)					
						RxBuffer1[i] = RxBuffer[i+1];
           len = 0;					
				}	
					
    }
	 if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)             //这段是为了避免STM32 USART 第一个字节发不出去的BUG 
     USART_ITConfig(USART2, USART_IT_TXE, DISABLE);					        //禁止发缓冲器空中断
	 	
} 

void uart2_init(u32 bound){
	//GPIO端口设置
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	 
//	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);	//使能USART2
  
	//USART2_TX   GPIOA.2
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; //PA.9
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	//复用推挽输出
	GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化GPIOA.9
   
	//USART2_RX	  GPIOA.3初始化
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;//PA10
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//浮空输入
	GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化GPIOA.10  

	//Usart1 NVIC 配置
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=1 ;//抢占优先级3
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		//子优先级3
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器
  
	//USART 初始化设置

	USART_InitStructure.USART_BaudRate = bound;//串口波特率
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式

	USART_Init(USART2, &USART_InitStructure);     //初始化串口1
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);//开启串口接受中断
	USART_Cmd(USART2, ENABLE);                    //使能串口1 
}

